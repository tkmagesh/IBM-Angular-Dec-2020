UI
    Controller
        UI Behavior
    View
        Presentation (Generate HTML)
    Model
        (State) Data

MailItem -> Data + Presentation + UI Behavior

Component
    - Class that represents one UI aspect of the application
    - Reusable
    - Synchronize the Presentation whenever the data is chaning
    - Composable

Application -> composition of components


Angular Building Blocks
    - Component
        represents one UI aspect of the application
        encapsulates Data + Presentation + UI Behavior

    - Module
        modularize the application entities
        support for dependency injection
        Application can be made of many modules
        There has to be a minimum of 1 module
        Bootstraping of an application is through the module
        All the entities of the application have to be registered in the module
            declarations - components, directives & pipes
            providers - services
            imports - dependent modules
            bootstrap - top most component in the component tree

    - Pipe
        Data transformation logic for presentation

    - Directive
        Low level DOM manipulation

    - Service
        Non UI responsibilities


ES6 (ECMAScript 6, ES2015, ESNext)

http://es6-features.org

1. let
2. const
3. array destructuring
4. rest operator (array)
5. spread operator (array)
6. object destructuring
7. rest operator (object)
8. spread operator (object)
9. default arguments
10. arrow function
11. template strings
12. classes


class Employee{
    id = 0;
    name = '';
    salary = 0;

    display(){
        console.log(`id=${this.id}, name=${this.name} and salary=${this.salary}`);
    }

    constructor(id, name, salary){
        this.id = id;
        this.name = name;
        this.salary = salary;
    }
}

class FullTimeEmployee extends Employee{
    benefits = '';

    constructor(id, name, salary, benefits){
        super(id, name, salary);
        this.benefits = benefits;
    }
}

TypeScript (http://typescriptlang.org)
    => JavaScript + TypeSafety


var x:number = 100;

function add(x:number,y:number):number {
    return x + y;
}

add('abc',100)

    =====> typescript compiler =====>

var x = 100;

function add(x,y) {
    return x + y;
}

Langauge Features
    - Access modifiers (public, private, protected)
    - Support for 'interfaces'
    - Support for 'enums'
    - Support for 'classes'
    - Support for 'decorators' (like annotations in Java)
    - Support for 'generics'

Webpack Bundler

To create a new component
    - create a folder for the component in the 'src' folder
    - in that folder
        create files
            <component-name>.component.ts
            <component-name>.component.html
            <component-name>.component.css

    - register the component in the app.module
    - use the component in 'index.html' OR on other component (using the selector)


Directives
    - Attribute Directive
        manipulates the attributes of existing DOM nodes
        doesn't change the structure of the DOM tree (add/remove DOM nodes)
        used by wrapping with []

    - Structural Directive
        changes the structure of the DOM tree (by adding/removing DOM nodes)
        used by prefixing with *


Functional Programming utils

var nos = [3,1,4,2,5]

forEach
    nos.forEach(no => console.log(no))

map
    nos.map(no => no * 2)

filter
    var even = nos.filter(no => no % 2 === 0)
    var odd = nos.filter(no => no % 2 !== 0)

reduce

    var sum = nos.reduce(function(prevResult, no){
        const result = prevResult + no;
        console.log(`prevResult = ${prevResult}, no = ${no}, result = ${result}`);
        return result;
    })

    var sum = nos.reduce(function(prevResult, no){
        const result = prevResult + no;
        console.log(`prevResult = ${prevResult}, no = ${no}, result = ${result}`);
        return result;
    }, 0)

    nos.reduce((prevResult, no) => {
        if (no % 2 === 0){
            return {...prevResult, even : prevResult.even + 1}
        } else {
            return {...prevResult, odd : prevResult.odd + 1}
        }
    }, { even : 0, odd : 0 })

ES6 Modules
    - Everything defined in a JS/TS file is considered private
    - Anything that needed to exposed to the outside world has to be explicitly exported
    - Outside modules need to be explicitly imported


Promise
    Object designed to hold the result of the async operation
    One can subscribte to the promise object to get the result
    then(callback), catch(callback)
        callback to the 'then' method will be executed when the async operation is successfull.
        callback to the 'catch' method will be executed when the async operation is failure.

Observable
    for stream of data (events)
    rxjs (Reactive Extension for JavaScript)

Event Driven Applications

employees.csv
id, first name, last name, doj, city, salary

let count = 0, sumOfSalary = 0;
open employees.csv
while(!eof()){
    read line;
    parse line;
    ++count;
    sumOfSalary += salary;
}
let avgSalary = sumOfSalary / count;
print avgSalary
close employees.csv


projects
schedules
teams

RIA lacks bookmarkkability

http://www.amazon.in
http://www.amazon.in/electronics
http://www.amazon.in/electronics/phones
http://www.amazon.in/electronics/phones/google
http://www.amazon.in/electronics/phones/google/pixel-2

http://www.amazon.in/electronics/phones/google/pixel-2/reviews


Outlook
Outlook/Inbox
Outlook/Inbox/Projects
Outlook/Inbox/Projects/Payroll-Master
Outlook/Inbox/Projects/Payroll-Master/bugs
Outlook/Inbox/Projects/Payroll-Master/bugs/bug-101


